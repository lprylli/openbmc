From 5b708ad943f2fd0c72662be4af4aa195b669bced Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Thu, 21 Nov 2019 11:28:33 +0800
Subject: [PATCH 2/2] PSU-type sensors to support the invalid value property

---
 include/PSUSensor.hpp |  7 +++--
 src/PSUSensor.cpp     | 62 ++++++++++++++++++++++++++++++++++++++++---
 src/PSUSensorMain.cpp | 58 +++++++++++++++++++++++++++++++++++++++-
 3 files changed, 120 insertions(+), 7 deletions(-)

diff --git a/include/PSUSensor.hpp b/include/PSUSensor.hpp
index 370ded9..08aa469 100644
--- a/include/PSUSensor.hpp
+++ b/include/PSUSensor.hpp
@@ -15,7 +15,7 @@ class PSUSensor : public Sensor
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& sensorConfiguration,
               std::string& sensorTypeName, unsigned int factor, double max,
-              double min);
+              double min, PowerState readState);
     ~PSUSensor();
 
   private:
@@ -30,8 +30,11 @@ class PSUSensor : public Sensor
     void handleResponse(const boost::system::error_code& err);
     void checkThresholds(void) override;
 
-    static constexpr unsigned int sensorPollMs = 500;
+    static constexpr unsigned int sensorPollMs = 1000;
     static constexpr size_t warnAfterErrorCount = 10;
+
+    // Power-on sensor
+    PowerState readState;
 };
 
 class PSUProperty
diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index 58dee54..b539e59 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -35,12 +35,12 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
                      std::vector<thresholds::Threshold>&& _thresholds,
                      const std::string& sensorConfiguration,
                      std::string& sensorTypeName, unsigned int factor,
-                     double max, double min) :
+                     double max, double min, PowerState readState) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, max, min),
     path(path), objServer(objectServer),
     inputDev(io, open(path.c_str(), O_RDONLY)), waitTimer(io), errCount(0),
-    sensorFactor(factor)
+    sensorFactor(factor), readState(std::move(readState))
 {
     std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
 
@@ -61,6 +61,7 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
         objectServer.add_interface(dbusPath, "org.openbmc.Associations");
 
     setInitialProperties(conn);
+    setupPowerMatch(conn);
     setupRead();
 }
 
@@ -85,8 +86,43 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
 {
     if (err == boost::system::errc::bad_file_descriptor)
     {
+        updateValueInvalid(true);
+        // updateValue(0);
         return;
     }
+
+    // Set as sensor reading invalid for power-on type sensor
+    if (readState != PowerState::always && !isPowerOn())
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+        errCount = 0;
+
+        // clear response buffer reading
+        std::istream invalidResponseStream(&readBuf);
+        std::string invalidResponse;
+        std::getline(invalidResponseStream, invalidResponse);
+        invalidResponseStream.clear();
+
+        inputDev.close();
+        int fd = open(path.c_str(), O_RDONLY);
+        if (fd <= 0)
+        {
+            return;
+        }
+        inputDev.assign(fd);
+        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.async_wait([&](const boost::system::error_code& ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                return;
+            }
+            setupRead();
+        });
+
+        return;
+    }
+
     std::istream responseStream(&readBuf);
     if (!err)
     {
@@ -99,8 +135,20 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
             nvalue /= sensorFactor;
             if (static_cast<double>(nvalue) != value)
             {
-                updateValue(nvalue);
+                if(readState == PowerState::always)
+                {
+                    updateValue(nvalue);
+                }
+                else
+                {
+                    if(isPowerGood())
+                    {
+                        updateValue(nvalue);
+                    }
+                }
             }
+
+            updateValueInvalid(false);
             errCount = 0;
         }
         catch (const std::invalid_argument&)
@@ -120,7 +168,8 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
             std::cerr << "Failure to read sensor " << name << " at " << path
                       << "\n";
         }
-        updateValue(0);
+        updateValueInvalid(true);
+        // updateValue(0);
         errCount++;
     }
 
@@ -144,5 +193,10 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
 
 void PSUSensor::checkThresholds(void)
 {
+    if (readState != PowerState::always && !isPowerOn())
+    {
+        return;
+    }
+
     thresholds::checkThresholds(this);
 }
diff --git a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
index 9a8f6e6..d033971 100644
--- a/src/PSUSensorMain.cpp
+++ b/src/PSUSensorMain.cpp
@@ -139,6 +139,52 @@ static void checkPWMSensor(const fs::path& sensorPath, std::string& labelHead,
     }
 }
 
+static bool checkPowerState(const SensorData& sensorData,
+                            PowerState& sensorReadState,
+                            const std::string* matchLabel)
+{
+    sensorReadState = PowerState::always;
+
+    if (matchLabel == nullptr)
+    {
+        return false;
+    }
+
+    for (const auto& item : sensorData)
+    {
+        if (item.first.find("PowerStates") == std::string::npos)
+        {
+            continue;
+        }
+
+        auto labelFind = item.second.find("Label");
+        if (labelFind == item.second.end())
+        {
+            continue;
+        }
+        if (std::visit(VariantToStringVisitor(), labelFind->second) !=
+            *matchLabel)
+        {
+            continue;
+        }
+
+        auto findPowerState = item.second.find("PowerState");
+        if (findPowerState == item.second.end())
+        {
+            std::cerr << "failed to find PowerState in configuration\n";
+            return false;
+        }
+
+        std::string powerState = std::visit(
+                            VariantToStringVisitor(), findPowerState->second);
+        setReadState(powerState, sensorReadState);
+
+        break;
+    }
+
+    return true;
+}
+
 void createSensors(boost::asio::io_service& io,
                    sdbusplus::asio::object_server& objectServer,
                    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
@@ -426,6 +472,16 @@ void createSensors(boost::asio::io_service& io,
                 continue;
             }
 
+            /* wiw - Parse the sensor reading power state from the config file.
+               States: Always / On / BiosPost
+            */
+           PowerState sensorReadState;
+           if (!checkPowerState(*sensorData, sensorReadState, &labelHead))
+           {
+               std::cerr << "failed to find the sensor read power state for "
+                          << sensorNameSubStr << "\n";
+           }
+
             std::string sensorName =
                 psuNames[nameIndex] + " " + findProperty->second.labelTypeName;
 
@@ -433,7 +489,7 @@ void createSensors(boost::asio::io_service& io,
                 sensorPathStr, sensorType, objectServer, dbusConnection, io,
                 sensorName, std::move(sensorThresholds), *interfacePath,
                 findSensorType->second, factor, findProperty->second.maxReading,
-                findProperty->second.minReading);
+                findProperty->second.minReading, sensorReadState);
         }
 
         // OperationalStatus event
-- 
2.22.0

