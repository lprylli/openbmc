From 3977e35cb49c04e285e3a62474e36507a2c9c5f0 Mon Sep 17 00:00:00 2001
From: Eilin <eilin_li@wiwynn.com>
Date: Wed, 4 Nov 2020 16:28:56 +0800
Subject: [PATCH] Support fru read only option

---
 include/storagecommands.hpp |  7 ++++++
 src/storagecommands.cpp     | 48 +++++++++++++++++++++++++++++++++++--
 2 files changed, 53 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 include/storagecommands.hpp
 mode change 100644 => 100755 src/storagecommands.cpp

diff --git a/include/storagecommands.hpp b/include/storagecommands.hpp
old mode 100644
new mode 100755
index 3d28f48..833cc86
--- a/include/storagecommands.hpp
+++ b/include/storagecommands.hpp
@@ -83,6 +83,13 @@ struct WriteFRUDataReq
 };
 #pragma pack(pop)
 
+struct deviceInfo
+{
+    uint8_t bus;
+    uint8_t address;
+    bool readOnly;
+};
+
 enum class GetFRUAreaAccessType : uint8_t
 {
     byte = 0x0,
diff --git a/src/storagecommands.cpp b/src/storagecommands.cpp
old mode 100644
new mode 100755
index ffd7c72..a2fcb97
--- a/src/storagecommands.cpp
+++ b/src/storagecommands.cpp
@@ -119,6 +119,8 @@ std::unique_ptr<phosphor::Timer> cacheTimer = nullptr;
 // collision to verify our dev-id
 boost::container::flat_map<uint8_t, std::pair<uint8_t, uint8_t>> deviceHashes;
 
+boost::container::flat_map<uint8_t, struct deviceInfo> deviceMap;
+
 // FRU inventory size
 boost::container::flat_map<uint8_t, uint32_t> deviceSizes;
 
@@ -199,6 +201,7 @@ ipmi_ret_t replaceCacheFru(uint8_t devId)
 
     deviceHashes.clear();
     deviceSizes.clear();
+    deviceMap.clear();
 
     // hash the object paths to create unique device id's. increment on
     // collision
@@ -211,20 +214,46 @@ ipmi_ret_t replaceCacheFru(uint8_t devId)
             continue;
         }
 
+        auto indexFind = fruIface->second.find("INDEX");
         auto busFind = fruIface->second.find("BUS");
         auto addrFind = fruIface->second.find("ADDRESS");
         if (busFind == fruIface->second.end() ||
-            addrFind == fruIface->second.end())
+            addrFind == fruIface->second.end() ||
+            indexFind == fruIface->second.end())
         {
             phosphor::logging::log<phosphor::logging::level::INFO>(
-                "fru device missing Bus or Address",
+                "fru device missing Bus or Address or Index.",
                 phosphor::logging::entry("FRU=%s", fru.first.str.c_str()));
             continue;
         }
 
+        uint8_t fruIndex = std::get<uint32_t>(indexFind->second);
         uint8_t fruBus = std::get<uint32_t>(busFind->second);
         uint8_t fruAddr = std::get<uint32_t>(addrFind->second);
 
+        bool readOnly = false;
+        auto readOnlyFind = fruIface->second.find("READONLY");
+        if (readOnlyFind != fruIface->second.end())
+        {
+            readOnly = std::get<bool>(readOnlyFind->second);
+        }
+
+        struct deviceInfo newDevice = {fruBus, fruAddr, readOnly};
+
+        auto deviceFind = deviceMap.find(fruIndex);
+        if (deviceFind == deviceMap.end())
+        {
+            deviceMap.emplace(fruIndex, newDevice);
+        }
+        else
+        {
+            std::cerr << "Fru devices have the same index. Index: "
+                      << static_cast<uint32_t>(fruIndex)
+                      << ", Bus: " << static_cast<uint32_t>(fruBus)
+                      << ", Address: " << static_cast<uint32_t>(fruAddr)
+                      << "\n";
+        }
+
         uint8_t fruHash = 0;
 
         // Set the fru default size to 256 bytes.
@@ -431,6 +460,21 @@ ipmi_ret_t ipmiStorageWriteFRUData(ipmi_netfn_t netfn, ipmi_cmd_t cmd,
     {
         return status;
     }
+
+    auto deviceFind = deviceMap.find(req->fruDeviceID);
+    if (deviceFind == deviceMap.end())
+    {
+        return IPMI_CC_SENSOR_INVALID;
+    }
+    auto& device = deviceFind->second;
+
+    if (device.readOnly == true)
+    {
+        std::cerr << "Fru " << static_cast<int>(req->fruDeviceID)
+                  << " is read only device\n";
+        return IPMI_CC_INVALID_FIELD_REQUEST;
+    }
+
     int lastWriteAddr = req->fruInventoryOffset + writeLen;
     if (fruCache.size() < lastWriteAddr)
     {
-- 
2.17.1

