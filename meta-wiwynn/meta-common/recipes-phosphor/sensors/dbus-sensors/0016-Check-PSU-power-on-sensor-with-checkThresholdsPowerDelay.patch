From 1100c7cb698b740b187ca24c841d335fd0821f85 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Mon, 16 Dec 2019 17:29:55 +0800
Subject: [PATCH] Check PSU power-on sensor thresholds with
 checkThresholdsPowerDelay

---
 include/PSUSensor.hpp |  1 +
 src/PSUSensor.cpp     | 30 +++++++++++++++++-------------
 2 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/include/PSUSensor.hpp b/include/PSUSensor.hpp
index e951bfc..62aa5e1 100644
--- a/include/PSUSensor.hpp
+++ b/include/PSUSensor.hpp
@@ -38,6 +38,7 @@ class PSUSensor : public Sensor
 
     // Power-on sensor
     PowerState readState;
+    thresholds::ThresholdTimer thresholdTimer;
 };
 
 class PSUProperty
diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index 7c96290..217eed9 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -46,7 +46,7 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
            std::move(_thresholds), sensorConfiguration, objectType, max, min),
     objServer(objectServer), inputDev(io, open(path.c_str(), O_RDONLY)),
     waitTimer(io), path(path), errCount(0),
-    sensorFactor(factor), readState(std::move(readState))
+    sensorFactor(factor), readState(std::move(readState)), thresholdTimer(io, this)
 {
     if constexpr (DEBUG)
     {
@@ -92,10 +92,17 @@ PSUSensor::~PSUSensor()
 
 void PSUSensor::setupRead(void)
 {
+#if 0
     boost::asio::async_read_until(
         inputDev, readBuf, '\n',
         [&](const boost::system::error_code& ec,
             std::size_t /*bytes_transfered*/) { handleResponse(ec); });
+#endif
+
+    // Sync read to PSU sensor
+    boost::system::error_code ec;
+    boost::asio::read_until(inputDev, readBuf, '\n', ec);
+    handleResponse(ec);
 }
 
 void PSUSensor::handleResponse(const boost::system::error_code& err)
@@ -164,17 +171,7 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
                               << " to " << nvalue << "\n";
                 }
 
-                if(readState == PowerState::always)
-                {
-                    updateValue(nvalue);
-                }
-                else
-                {
-                    if(isPowerGood())
-                    {
-                        updateValue(nvalue);
-                    }
-                }
+                updateValue(nvalue);
             }
 
             updateValueInvalid(false);
@@ -233,5 +230,12 @@ void PSUSensor::checkThresholds(void)
         return;
     }
 
-    thresholds::checkThresholds(this);
+    if(readState == PowerState::always)
+    {
+        thresholds::checkThresholds(this);
+    }
+    else
+    {
+        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+    }
 }
-- 
2.24.1

