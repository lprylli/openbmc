From 966ccdc559d979fdbda77616580e49d4d6df427d Mon Sep 17 00:00:00 2001
From: James Chang <Chang.JamesWC@inventec.com>
Date: Thu, 25 Mar 2021 12:51:46 +0800
Subject: [PATCH] Implement to sync BMC system time with ME at IPMI logging
 serive

---
 .../xyz.openbmc_project.Logging.IPMI.service  |  2 +
 src/sel_logger.cpp                            | 71 +++++++++++++++++++
 2 files changed, 73 insertions(+)

diff --git a/service_files/xyz.openbmc_project.Logging.IPMI.service b/service_files/xyz.openbmc_project.Logging.IPMI.service
index 9b8ae41..c5cc961 100644
--- a/service_files/xyz.openbmc_project.Logging.IPMI.service
+++ b/service_files/xyz.openbmc_project.Logging.IPMI.service
@@ -1,5 +1,7 @@
 [Unit]
 Description=IPMI SEL Logging Service
+Wants=ipmb.service 
+After=ipmb.service 
 
 [Service]
 Restart=always
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index 5f330e0..2860208 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -30,6 +30,10 @@
 #include <iostream>
 #include <sstream>
 
+#include <tuple>
+#include <time.h>
+#include <boost/asio/steady_timer.hpp>
+
 struct DBusInternalError final : public sdbusplus::exception_t
 {
     const char* name() const noexcept override
@@ -172,6 +176,62 @@ static uint16_t selAddOemRecord(const std::string& message,
     return recordId;
 }
 
+static void syncTimeWithME(std::shared_ptr<sdbusplus::asio::connection> conn)
+{
+    std::tuple<int32_t, uint8_t, uint8_t, uint8_t, uint8_t, std::vector<uint8_t>> cmdResponses;
+
+    uint8_t commandAddress = 1;
+    uint8_t netfn = 0xa;
+    uint8_t lun = 0;
+    uint8_t command = 0x48;
+    std::vector<uint8_t> commandData = {};
+
+    auto mesg = conn->new_method_call("xyz.openbmc_project.Ipmi.Channel.Ipmb",
+                                      "/xyz/openbmc_project/Ipmi/Channel/Ipmb",
+                                      "org.openbmc.Ipmb", "sendRequest");
+    mesg.append(commandAddress, netfn, lun, command, commandData);
+
+    try
+    {
+        auto reply = conn->call(mesg);
+        reply.read(cmdResponses);
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        sd_journal_print(LOG_ERR, "Failed to sync Time with ME:%s\n",e.name());
+        return;
+    }
+
+    std::vector<uint8_t> dataReceived(4, 0);
+    int32_t status = -1;
+    uint8_t netFn = 0;
+    uint8_t rslun = 0;
+    uint8_t cmd = 0;
+    uint8_t cc = 0;
+
+    std::tie(status, netFn, rslun, cmd, cc, dataReceived) = cmdResponses;
+
+    sd_journal_print(LOG_INFO, "ME Get Time CC: 0x%x\n", cc);
+    sd_journal_print(LOG_INFO, "ME Get Time Data [0x%x:0x%x:0x%x:0x%x]\n",
+            dataReceived.at(0), dataReceived.at(1), dataReceived.at(2),dataReceived.at(3));
+
+    if (0 == cc)
+    {
+        uint32_t selTime = static_cast<uint32_t>(dataReceived.at(3) << 24) |
+                                                (dataReceived.at(2) << 16) |
+                                                (dataReceived.at(1) << 8) |
+                                                (dataReceived.at(0));
+        struct timespec selTimeBuf = {};
+        selTimeBuf.tv_sec = selTime;
+        if (clock_settime(CLOCK_REALTIME, &selTimeBuf) < 0)
+        {
+            std::cerr << "Failed to set BMC system time.\n";
+        }
+    }
+
+    return;
+}
+
 int main(int argc, char* argv[])
 {
     // setup connection to dbus
@@ -212,6 +272,17 @@ int main(int argc, char* argv[])
         startPulseEventMonitor(conn);
 #endif
 
+    // Sync BMC system time with ME
+    //boost::asio::steady_timer syncMETimer(io);
+    //syncMETimer.expires_from_now(boost::asio::chrono::seconds(60));
+    //syncMETimer.async_wait([&](const boost::system::error_code& ec) {
+    //    if (ec == boost::asio::error::operation_aborted)
+    //    {
+    //        return; // we're being canceled
+     //   }
+    syncTimeWithME(conn);;
+    //});
+
     io.run();
 
     return 0;
