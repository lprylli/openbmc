From ac3b74c2a0c73f7bb5bec0adbc04271d506e0f6d Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Sun, 15 Mar 2020 21:58:00 +0800
Subject: [PATCH] Add to support NVMe temperature sensor

---
 CMakeLists.txt                                |  13 +-
 include/NVMESensor.hpp                        |  61 ++++
 .../xyz.openbmc_project.nvmesensor.service    |   2 +-
 src/NVMESensor.cpp                            | 273 +++++++++++++++++
 src/NVMESensorMain.cpp                        | 280 ++++++++++++++++++
 5 files changed, 621 insertions(+), 8 deletions(-)
 create mode 100644 include/NVMESensor.hpp
 create mode 100644 src/NVMESensor.cpp
 create mode 100644 src/NVMESensorMain.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d75392b..8141c31 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -47,7 +47,7 @@ option (DISABLE_INTRUSION "Disable installing intrusion sensor" OFF)
 option (DISABLE_IPMB "Disable installing IPMB sensor" OFF)
 option (DISABLE_MCUTEMP "Disable installing MCU temperature sensor" OFF)
 option (DISABLE_PSU "Disable installing PSU sensor" OFF)
-option (DISABLE_NVME "Disable installing NVME sensor" ON)
+option (DISABLE_NVME "Disable installing NVME sensor" OFF)
 option (BMC_CPU_SENSOR_TCONTROL "Enable Tcontrol Threshold setting" ON)
 
 include ("cmake/HunterGate.cmake")
@@ -82,7 +82,7 @@ set (MCUTEMP_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
 set (PSU_SRC_FILES src/Utils.cpp src/PSUSensor.cpp src/Thresholds.cpp
      src/PwmSensor.cpp src/PSUEvent.cpp)
 
-set (NVME_SRC_FILES src/Utils.cpp src/NVMeSensorMain.cpp src/NVMeSensor.cpp src/Thresholds.cpp)
+set (NVME_SRC_FILES src/Utils.cpp src/NVMESensor.cpp src/Thresholds.cpp)
 
 set (EXTERNAL_PACKAGES Boost sdbusplus-project nlohmann-json)
 set (SENSOR_LINK_LIBS -lsystemd -lobmci2c -lobmcmisc stdc++fs sdbusplus)
@@ -215,11 +215,9 @@ add_executable (psusensor src/PSUSensorMain.cpp ${PSU_SRC_FILES})
 add_dependencies (psusensor sdbusplus-project)
 target_link_libraries (psusensor ${SENSOR_LINK_LIBS})
 
-if (NOT DISABLE_NVME)
-    add_executable (nvmesensor ${NVME_SRC_FILES})
-    add_dependencies (nvmesensor sdbusplus-project)
-    target_link_libraries (nvmesensor liblibmctp.a i2c ${SENSOR_LINK_LIBS})
-endif()
+add_executable (nvmesensor src/NVMESensorMain.cpp ${NVME_SRC_FILES})
+add_dependencies (nvmesensor sdbusplus-project)
+target_link_libraries (nvmesensor ${SENSOR_LINK_LIBS} -lboost_filesystem)
 
 if (NOT YOCTO)
     add_dependencies (adcsensor ${EXTERNAL_PACKAGES})
@@ -229,6 +227,7 @@ if (NOT YOCTO)
     add_dependencies (hwmontempsensor ${EXTERNAL_PACKAGES})
     add_dependencies (vrsensor ${EXTERNAL_PACKAGES})
     add_dependencies (eventsensor ${EXTERNAL_PACKAGES})
+    add_dependencies (nvmesensor ${EXTERNAL_PACKAGES})
     add_dependencies (intrusionsensor ${EXTERNAL_PACKAGES})
     add_dependencies (ipmbsensor ${EXTERNAL_PACKAGES})
     add_dependencies (mcutempsensor ${EXTERNAL_PACKAGES})
diff --git a/include/NVMESensor.hpp b/include/NVMESensor.hpp
new file mode 100644
index 0000000..ff34537
--- /dev/null
+++ b/include/NVMESensor.hpp
@@ -0,0 +1,61 @@
+#pragma once
+
+#include <Thresholds.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+#define NVME_SLAVE_ADDRESS 0x6A
+
+enum nvme_mi_cmd_offset
+{
+    length = 0x00,
+    flag = 0x01,
+    smart_warnings = 0x02,
+    temp = 0x03,
+    pdlu = 0x04,
+    pec = 0x07,
+};
+
+enum nvme_temp_status {
+    NVME_REPORTED_IN_RANGE = 0x00,
+    NVME_NO_TEMP_DATA = 0x80,
+    NVME_SENSOR_FAILURE = 0x81,
+    NVME_RESERVED_MIN = 0x82,
+    NVME_RESERVED_MAX = 0xC3,
+    NVME_VALUE_NEGATIVE = 0xC4,
+};
+
+class NVMESensor : public Sensor
+{
+public:
+    NVMESensor(const std::string& path, const std::string& objectType,
+               sdbusplus::asio::object_server& objectServer,
+               std::shared_ptr<sdbusplus::asio::connection>& conn,
+               boost::asio::io_service& io, const std::string& sensorName,
+               std::vector<thresholds::Threshold>&& thresholds,
+               const std::string& sensorConfiguration,
+               std::string& sensorUnit, std::string& sensorTypeName,
+               const double MaxValue, const double MinValue,
+               const uint8_t busId, std::vector<uint8_t> mux_channels, const uint8_t muxChannelIndex);
+    ~NVMESensor();
+
+private:
+    sdbusplus::asio::object_server& objServer;
+    boost::asio::deadline_timer waitTimer;
+    boost::asio::streambuf readBuf;
+    std::string path;
+    std::vector<uint8_t> mux_channels;
+    std::vector<uint8_t> nvme_status;
+    std::string& sensorType;
+    std::string& sensorUnit;
+    int errCount;
+    uint8_t busId;
+    uint8_t muxChannelIndex;
+    float senValue;
+    void setupRead(void);
+    bool visitNVMEReg(void);
+    int32_t ConvertToRealTemp(uint8_t rawValue,
+                              uint8_t channel, int8_t *realValue);
+    void handleResponse(void);
+    void checkThresholds(void) override;
+};
diff --git a/service_files/xyz.openbmc_project.nvmesensor.service b/service_files/xyz.openbmc_project.nvmesensor.service
index a5c8725..09d9874 100644
--- a/service_files/xyz.openbmc_project.nvmesensor.service
+++ b/service_files/xyz.openbmc_project.nvmesensor.service
@@ -9,4 +9,4 @@ RestartSec=5
 ExecStart=/usr/bin/nvmesensor
 
 [Install]
-WantedBy=multi-user.target
\ No newline at end of file
+WantedBy=multi-user.target
diff --git a/src/NVMESensor.cpp b/src/NVMESensor.cpp
new file mode 100644
index 0000000..d397c58
--- /dev/null
+++ b/src/NVMESensor.cpp
@@ -0,0 +1,273 @@
+/*
+// Copyright (c) 2019 Wiwynn Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <openbmc/libmisc.h>
+#include <openbmc/libobmci2c.h>
+#include <unistd.h>
+
+#include <NVMESensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/date_time/posix_time/posix_time.hpp>
+#include <iostream>
+#include <limits>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <string>
+
+static constexpr bool DEBUG = false;
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+
+static constexpr unsigned int sensorPollMs = 1000;
+static constexpr unsigned int sensorScaleFactor = 1000;
+static constexpr size_t warnAfterErrorCount = 10;
+
+NVMESensor::NVMESensor(const std::string& path, const std::string& objectType,
+                       sdbusplus::asio::object_server& objectServer,
+                       std::shared_ptr<sdbusplus::asio::connection>& conn,
+                       boost::asio::io_service& io, const std::string& sensorName,
+                       std::vector<thresholds::Threshold>&& _thresholds,
+                       const std::string& sensorConfiguration,
+                       std::string& sensorUnit, std::string& sensorTypeName,
+                       const double MaxValue, const double MinValue,
+                       const uint8_t busId, std::vector<uint8_t> mux_channels, const uint8_t muxChannelIndex) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(_thresholds), sensorConfiguration, objectType, MaxValue,
+           MinValue),
+    path(path), objServer(objectServer), waitTimer(io), errCount(0),
+    senValue(0), busId(busId), mux_channels(mux_channels), muxChannelIndex(muxChannelIndex),
+    sensorType(sensorTypeName), sensorUnit(sensorUnit)
+{
+    std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
+
+    for (int i = 0; i < mux_channels.size(); i++)
+    {
+        nvme_status.push_back(NVME_REPORTED_IN_RANGE);
+    }
+
+    sensorInterface = objectServer.add_interface(
+                          dbusPath, "xyz.openbmc_project.Sensor.Value");
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+                                        dbusPath, "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+                                         dbusPath, "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association =
+        objectServer.add_interface(dbusPath, "org.openbmc.Associations");
+
+    setInitialProperties(conn);
+    setupPowerMatch(conn);
+    setupRead();
+}
+
+NVMESensor::~NVMESensor()
+{
+    // close the Timer to cancel async operations
+    waitTimer.cancel();
+    objServer.remove_interface(thresholdInterfaceWarning);
+    objServer.remove_interface(thresholdInterfaceCritical);
+    objServer.remove_interface(sensorInterface);
+    objServer.remove_interface(association);
+}
+
+void NVMESensor::setupRead(void)
+{
+    // NVMe sensor belongs to power-on type sensor
+    if (!isPowerOn())
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+
+        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.async_wait([&](const boost::system::error_code & ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being canceled
+        }
+            setupRead();
+        });
+
+        return;
+    }
+
+    bool res = visitNVMEReg();
+    if (res != true)
+    {
+        errCount++;
+    }
+    else
+    {     
+        errCount = 0;
+    }
+
+    handleResponse();
+}
+
+int32_t NVMESensor::ConvertToRealTemp(uint8_t rawValue, uint8_t channel, int8_t *realValue)
+{
+    if (rawValue == NVME_NO_TEMP_DATA)
+    {
+        if (nvme_status.at(channel) != NVME_NO_TEMP_DATA)
+        {
+            std::cerr << "Channel : " << unsigned(mux_channels.at(channel))
+                      << ", no temperature data or temperature data is"
+                      << " more the 5 seconds old.\n";
+            nvme_status.at(channel) = NVME_NO_TEMP_DATA;
+        }
+        return -1;
+    }
+    else if (rawValue == NVME_SENSOR_FAILURE)
+    {
+        if (nvme_status.at(channel) != NVME_SENSOR_FAILURE)
+        {
+            std::cerr << "Channel : " << unsigned(mux_channels.at(channel))
+                      << ", temperature sensor failure.\n";
+            nvme_status.at(channel) = NVME_SENSOR_FAILURE;
+        }
+        return -1;
+    }
+    else if (rawValue >= NVME_RESERVED_MIN && rawValue <= NVME_RESERVED_MAX)
+    {
+        if (nvme_status.at(channel) != rawValue)
+        {
+            std::cerr << "Channel : " << unsigned(mux_channels.at(channel))
+                      << ", value is reserved.\n";
+            nvme_status.at(channel) = rawValue;
+        }
+        return -1;
+    }
+    else
+    {
+        nvme_status.at(channel) = NVME_REPORTED_IN_RANGE;
+        if (rawValue >= NVME_VALUE_NEGATIVE)
+        {
+            *realValue = -(~(rawValue) + 1);
+        }
+        else
+        {
+            *realValue = rawValue;
+        }
+        return 0;
+    }
+}
+
+bool NVMESensor::visitNVMEReg(void)
+{
+    int fd = -1;
+    int res = -1;
+
+    if (sensorUnit == "temp")
+    {
+        std::vector<char> filename;
+        filename.assign(32, 0);
+        
+        if (!isPowerOn())
+        {
+            updateValueInvalid(true);
+            // updateValue(0);
+
+            return false;
+        }
+
+        fd = open_i2c_dev(mux_channels.at(muxChannelIndex), filename.data(), filename.size(), 0);
+        if (fd < 0)
+        {
+            std::cerr << "Fail to open I2C device: " << path << "\n";
+            return false;
+        }
+        std::vector<uint8_t> cmdData;
+        std::vector<uint8_t> readBuf;
+
+        cmdData.assign(1, nvme_mi_cmd_offset::temp);
+        readBuf.assign(1, 0x0);
+
+        res = i2c_master_write_read(fd, NVME_SLAVE_ADDRESS, cmdData.size(), cmdData.data(),
+                                    readBuf.size(), readBuf.data());
+        if (res < 0)
+        {
+            if (DEBUG)
+            {
+                std::cerr << "Path: " << path
+                          << ", Mux channels: " << unsigned(mux_channels.at(muxChannelIndex))
+                          << ", Addr: " << NVME_SLAVE_ADDRESS << "\n";
+            }
+            close_i2c_dev(fd);
+            return false;
+        }
+        uint8_t raw_value = readBuf.at(0);
+        int8_t real_value = 0;
+
+        res = ConvertToRealTemp (raw_value, muxChannelIndex, &real_value);
+        if (res < 0)
+        {
+            close_i2c_dev(fd);
+            return false;
+        }
+        senValue = real_value;
+
+        close_i2c_dev(fd);
+    }
+    else
+    {
+        //TODO: other type sensors
+    }
+
+    return true;
+}
+
+void NVMESensor::handleResponse()
+{
+    if (errCount == warnAfterErrorCount)
+    {
+        std::cerr << "failed to read sensor " << name << " at " << path
+                  << "\n";
+    }
+
+    if (errCount >= warnAfterErrorCount)
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+    }
+    else
+    {
+        if (static_cast<double>(senValue) != value)
+        {
+            updateValue(senValue);
+        }
+
+        updateValueInvalid(false);
+    }
+
+    waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+    waitTimer.async_wait([&](const boost::system::error_code & ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being canceled
+        }
+        setupRead();
+    });
+}
+
+void NVMESensor::checkThresholds(void)
+{
+    thresholds::checkThresholds(this);
+}
diff --git a/src/NVMESensorMain.cpp b/src/NVMESensorMain.cpp
new file mode 100644
index 0000000..a53a6ee
--- /dev/null
+++ b/src/NVMESensorMain.cpp
@@ -0,0 +1,280 @@
+/*
+// Copyright (c) 2019 Wiwynn Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <Utils.hpp>
+#include <NVMESensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_set.hpp>
+#include <boost/filesystem.hpp>
+#include <filesystem>
+#include <fstream>
+#include <regex>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+static constexpr bool DEBUG = false;
+
+namespace fs = std::filesystem;
+static constexpr std::array<const char*, 1> sensorTypes =
+{
+    "xyz.openbmc_project.Configuration.NVME"
+};
+
+static boost::container::flat_map<std::string, std::string> sensorTable;
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<NVMESensor>>& sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::unique_ptr<boost::container::flat_set<std::string>>&
+    sensorsChanged)
+{
+    bool firstScan = sensorsChanged == nullptr;
+    // use new data the first time, then refresh
+    ManagedObjectType sensorConfigurations;
+    bool useCache = false;
+    for (const char* type : sensorTypes)
+    {
+        if (!getSensorConfiguration(type, dbusConnection, sensorConfigurations,
+                                    useCache))
+        {
+            std::cerr << "error communicating to entity manager\n";
+            return;
+        }
+        useCache = true;
+    }
+
+    for (const std::pair<sdbusplus::message::object_path, SensorData>& sensor :
+            sensorConfigurations)
+    {
+        const SensorData* sensorData = nullptr;
+        const std::string* interfacePath = nullptr;
+        const char* sensorType = nullptr;
+        const std::pair<std::string, boost::container::flat_map<
+        std::string, BasicVariantType>>*
+                                     baseConfiguration = nullptr;
+
+        sensorData = &(sensor.second);
+        for (const char* type : sensorTypes)
+        {
+            auto sensorBase = sensorData->find(type);
+            if (sensorBase != sensorData->end())
+            {
+                baseConfiguration = &(*sensorBase);
+                sensorType = type;
+                break;
+            }
+        }
+        if (baseConfiguration == nullptr)
+        {
+            std::cerr << "error finding base configuration for NVME \n";
+            continue;
+        }
+
+        auto configurationBus = baseConfiguration->second.find("Bus");
+
+        if (configurationBus == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the bus in JSON\n";
+            continue;
+        }
+
+        uint8_t busId =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationBus->second));
+        std::string i2cBus = "/sys/class/i2c-dev/i2c-" + std::to_string(busId)
+                             + "/device";
+
+        std::vector<uint8_t> mux_channels;
+
+        // Get Mux Device
+        boost::filesystem::path bfs_path(i2cBus);
+        for (boost::filesystem::directory_iterator
+                it = boost::filesystem::directory_iterator(bfs_path);
+                it != boost::filesystem::directory_iterator(); ++ it )
+        {
+            boost::filesystem::path path = it->path();
+            std::string fileName = path.string();
+            fileName = fileName.substr(fileName.find_last_of('/') + 1);
+            if (fileName.find("i2c") != std::string::npos)
+            {
+                try
+                {
+                    fileName = fileName.substr(fileName.find_last_of('-') + 1);
+                    uint8_t mux_channel = std::stoi(fileName , nullptr , 10);
+                    mux_channels.push_back(mux_channel);
+                }
+                catch (std::invalid_argument&)
+                {
+                    if (DEBUG)
+                    {
+                        std::cerr << "fileName is error : " << fileName << "\n";
+                    }
+                }
+            }
+        }
+        std::sort(mux_channels.begin(), mux_channels.end());
+
+        interfacePath = &(sensor.first.str);
+        if (interfacePath == nullptr)
+        {
+            std::cerr << " invalid sensor interface path\n";
+            continue;
+        }
+
+        auto findMuxChannel = baseConfiguration->second.find("MuxChannel");
+        if (findMuxChannel == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the Mux Channel in JSON\n";
+            continue;
+        }
+        uint8_t muxChannelIndex = static_cast<uint8_t>(std::get<uint64_t>(findMuxChannel->second));
+
+        auto findSensorName = baseConfiguration->second.find("Name");
+        if (findSensorName == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor name in JSON\n";
+            continue;
+        }
+        std::string sensorName = std::get<std::string>(findSensorName->second);
+
+        // Sensor Type: power, curr, temp, volt
+        auto findSensorTypeJson = baseConfiguration->second.find("SensorType");
+        if (findSensorTypeJson == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor type in JSON\n";
+            continue;
+        }
+        std::string SensorTypeJson =
+            std::get<std::string>(findSensorTypeJson->second);
+
+        auto findSensorType = sensorTable.find(SensorTypeJson);
+        if (findSensorType == sensorTable.end())
+        {
+            std::cerr << "fail to find match for NVME sensorType: "
+                      << SensorTypeJson << "\n";
+            continue;
+        }
+
+        // on rescans, only update sensors we were signaled by
+        auto findSensor = sensors.find(sensorName);
+        if (!firstScan && findSensor != sensors.end())
+        {
+            bool found = false;
+            for (auto it = sensorsChanged->begin(); it != sensorsChanged->end();
+                    it++)
+            {
+                if (boost::ends_with(*it, findSensor->second->name))
+                {
+                    sensorsChanged->erase(it);
+                    findSensor->second = nullptr;
+                    found = true;
+                    break;
+                }
+            }
+            if (!found)
+            {
+                continue;
+            }
+        }
+
+        std::vector<thresholds::Threshold> sensorThresholds;
+        if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
+        {
+            std::cerr << "error populating thresholds for " << sensorName
+                      << "\n";
+        }
+
+        constexpr double defaultMaxReading = 127;
+        constexpr double defaultMinReading = -128;
+        auto limits = std::make_pair(defaultMinReading, defaultMaxReading);
+
+        findLimits(limits, baseConfiguration);
+
+        sensors[sensorName] = std::make_unique<NVMESensor>(
+                                  i2cBus, sensorType, objectServer, dbusConnection, io, sensorName,
+                                  std::move(sensorThresholds), *interfacePath, findSensorType->first,
+                                  findSensorType->second, defaultMaxReading, defaultMinReading,
+                                  busId, mux_channels, muxChannelIndex);
+    }
+}
+
+void propertyInitialize(void)
+{
+    sensorTable = {{"power", "power/"},
+        {"curr", "current/"},
+        {"temp", "temperature/"},
+        {"volt", "voltage/"}
+    };
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.NVMESensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+    boost::container::flat_map<std::string, std::unique_ptr<NVMESensor>> sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+    std::unique_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+                std::make_unique<boost::container::flat_set<std::string>>();
+
+    propertyInitialize();
+
+    io.post([&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::deadline_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+    [&](sdbusplus::message::message & message) {
+        if (message.is_method_error())
+        {
+            std::cerr << "callback method error\n";
+            return;
+        }
+        sensorsChanged->insert(message.get_path());
+        // this implicitly cancels the timer
+        filterTimer.expires_from_now(boost::posix_time::seconds(1));
+
+        filterTimer.async_wait([&](const boost::system::error_code & ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                /* we were canceled*/
+                return;
+            }
+            else if (ec)
+            {
+                std::cerr << "timer error\n";
+                return;
+            }
+            createSensors(io, objectServer, sensors, systemBus,
+                          sensorsChanged);
+        });
+    };
+
+    for (const char* type : sensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+                         static_cast<sdbusplus::bus::bus&>(*systemBus),
+                         "type='signal',member='PropertiesChanged',path_namespace='" +
+                         std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+                         eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
-- 
2.24.1

