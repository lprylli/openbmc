From e345dd5874355a59b19bdd20f7a19382b4eff126 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Tue, 10 Dec 2019 00:22:29 +0800
Subject: [PATCH] VR-type sensors to support the invalid value property

---
 include/VRSensor.hpp |  2 ++
 src/VRSensor.cpp     | 38 ++++++++++++++++++++++++++++++++++----
 src/VRSensorMain.cpp |  3 ++-
 3 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/include/VRSensor.hpp b/include/VRSensor.hpp
index 90af606..6272c11 100644
--- a/include/VRSensor.hpp
+++ b/include/VRSensor.hpp
@@ -32,6 +32,8 @@ class VRSensor : public Sensor
     int pmbuspage;
     uint8_t pmbusmode;
     float senValue;
+    thresholds::ThresholdTimer thresholdTimer;
+
     void setupRead(void);
     bool visitVRReg(void);
     void handleResponse(void);
diff --git a/src/VRSensor.cpp b/src/VRSensor.cpp
index 71c0345..d726e4d 100644
--- a/src/VRSensor.cpp
+++ b/src/VRSensor.cpp
@@ -49,7 +49,7 @@ VRSensor::VRSensor(
            MinValue),
     path(path), objServer(objectServer), waitTimer(io), errCount(0), senValue(0), 
     busId(busId), slaveAddr(slaveAddr), pmbuscmd(pmbuscmd), 
-    pmbuspage(pmbuspage), pmbusmode(pmbusmode)
+    pmbuspage(pmbuspage), pmbusmode(pmbusmode), thresholdTimer(io, this)
 {
     std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
 
@@ -70,6 +70,7 @@ VRSensor::VRSensor(
         objectServer.add_interface( dbusPath, "org.openbmc.Associations");
         
     setInitialProperties(conn);
+    setupPowerMatch(conn);
     setupRead();
 }
 
@@ -85,6 +86,24 @@ VRSensor::~VRSensor()
 
 void VRSensor::setupRead(void)
 {
+    // VR sensor belongs to power-on type sensor
+    if (!isPowerOn())
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+
+        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.async_wait([&](const boost::system::error_code & ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being canceled
+        }
+            setupRead();
+        });
+
+        return;
+    }
+
     bool res = visitVRReg();
     if( res != true)
     {
@@ -100,6 +119,13 @@ void VRSensor::setupRead(void)
 
 bool VRSensor::visitVRReg(void)
 {
+    if (!isPowerOn())
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+        return false;
+    }
+
     int fd = -1;
     int res = -1;
     std::vector<char> filename;
@@ -188,7 +214,8 @@ void VRSensor::handleResponse()
 
     if (errCount >= warnAfterErrorCount)
     {
-        updateValue(0);
+        updateValueInvalid(true);
+        // updateValue(0);
     }
     else
     {
@@ -196,6 +223,8 @@ void VRSensor::handleResponse()
         {
             updateValue(senValue);
         }
+
+        updateValueInvalid(false);
     }
 
     waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
@@ -210,5 +239,6 @@ void VRSensor::handleResponse()
 
 void VRSensor::checkThresholds(void)
 {
-    thresholds::checkThresholds(this);
-}
\ No newline at end of file
+    // thresholds::checkThresholds(this);
+    thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+}
diff --git a/src/VRSensorMain.cpp b/src/VRSensorMain.cpp
index 0eac88d..bad1b69 100644
--- a/src/VRSensorMain.cpp
+++ b/src/VRSensorMain.cpp
@@ -28,8 +28,9 @@
 static constexpr bool DEBUG = false;
 
 namespace fs = std::filesystem;
-static constexpr std::array<const char*, 3> sensorTypes = {
+static constexpr std::array<const char*, 4> sensorTypes = {
     "xyz.openbmc_project.Configuration.PXE1610",
+    "xyz.openbmc_project.Configuration.PXE1110",
     "xyz.openbmc_project.Configuration.SLUSC47B",
     "xyz.openbmc_project.Configuration.IR38163"
     };
-- 
2.22.0

