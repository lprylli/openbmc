From e5dbd35736fc7187cdbf29cefc55f7bb7851f6f6 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Wed, 6 Jan 2021 17:06:33 +0800
Subject: [PATCH] Support gpio event multi targets

---
 gpioMon.cpp     | 33 ++++++++++++++++++++++++++-------
 gpioMon.hpp     |  7 +++++--
 gpioMonMain.cpp |  4 ++--
 3 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/gpioMon.cpp b/gpioMon.cpp
index 2ab079a..0e10d40 100644
--- a/gpioMon.cpp
+++ b/gpioMon.cpp
@@ -68,15 +68,34 @@ void GpioMonitor::gpioEventHandler()
     log<level::INFO>(logMessage.c_str());
 
     /* Execute the target if it is defined. */
-    if (!target.empty())
+    std::vector<std::string> targetsToStart;
+    if (gpioLineEvent.event_type == GPIOD_LINE_EVENT_RISING_EDGE)
     {
-        auto bus = sdbusplus::bus::new_default();
-        auto method = bus.new_method_call(SYSTEMD_SERVICE, SYSTEMD_ROOT,
-                                          SYSTEMD_INTERFACE, "StartUnit");
-        method.append(target);
-        method.append("replace");
+        auto risingFind = target.find("RISING");
+        if (risingFind != target.end())
+        {
+            targetsToStart = risingFind->second;
+        }
+    }
+    else
+    {
+        auto fallingFind = target.find("FALLING");
+        if (fallingFind != target.end())
+        {
+            targetsToStart = fallingFind->second;
+        }
+    }
 
-        bus.call_noreply(method);
+    if (!targetsToStart.empty())
+    {
+        auto bus = sdbusplus::bus::new_default();
+        for (auto& tar : targetsToStart)
+        {
+            auto method = bus.new_method_call(SYSTEMD_SERVICE, SYSTEMD_ROOT,
+                                                SYSTEMD_INTERFACE, "StartUnit");
+            method.append(tar, "replace");
+            bus.call_noreply(method);
+        }
     }
 
     /* if not required to continue monitoring then return */
diff --git a/gpioMon.hpp b/gpioMon.hpp
index b07bb40..7da7490 100644
--- a/gpioMon.hpp
+++ b/gpioMon.hpp
@@ -4,6 +4,8 @@
 
 #include <boost/asio/io_service.hpp>
 #include <boost/asio/posix/stream_descriptor.hpp>
+#include <map>
+#include <vector>
 
 namespace phosphor
 {
@@ -35,7 +37,8 @@ class GpioMonitor
      *  @param[in] continueRun - Whether to continue after event occur
      */
     GpioMonitor(gpiod_line* line, gpiod_line_request_config& config,
-                boost::asio::io_service& io, const std::string& target,
+                boost::asio::io_service& io,
+                std::map<std::string, std::vector<std::string>> target,
                 const std::string& lineMsg, bool continueRun) :
         gpioLine(line),
         gpioConfig(config), gpioEventDescriptor(io), target(target),
@@ -55,7 +58,7 @@ class GpioMonitor
     boost::asio::posix::stream_descriptor gpioEventDescriptor;
 
     /** @brief Systemd unit to be started when the condition is met */
-    const std::string target;
+    std::map<std::string, std::vector<std::string>> target;
 
     /** @brief GPIO line name message */
     std::string gpioLineMsg;
diff --git a/gpioMonMain.cpp b/gpioMonMain.cpp
index 4b8b052..c896423 100644
--- a/gpioMonMain.cpp
+++ b/gpioMonMain.cpp
@@ -101,7 +101,7 @@ int main(int argc, char** argv)
         bool flag = false;
 
         /* target to start */
-        std::string target;
+        std::map<std::string, std::vector<std::string>> target;
 
         if (obj.find("LineName") == obj.end())
         {
@@ -170,7 +170,7 @@ int main(int argc, char** argv)
          */
         if (obj.find("Target") != obj.end())
         {
-            target = obj["Target"];
+            obj.at("Target").get_to(target);
         }
 
         /* Create a monitor object and let it do all the rest */
-- 
2.17.1

