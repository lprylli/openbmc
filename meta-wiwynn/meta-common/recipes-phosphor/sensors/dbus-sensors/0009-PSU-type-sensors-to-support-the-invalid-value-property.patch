From 95a4279b1ea10ae3e77228293c852628582fcaa8 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Sat, 14 Mar 2020 18:25:49 +0800
Subject: [PATCH] PSU-type sensors to support the invalid value property

---
 include/PSUSensor.hpp |  6 ++++-
 src/PSUSensor.cpp     | 58 +++++++++++++++++++++++++++++++++++++---
 src/PSUSensorMain.cpp | 62 +++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 119 insertions(+), 7 deletions(-)

diff --git a/include/PSUSensor.hpp b/include/PSUSensor.hpp
index 14b6d96..f3364a6 100644
--- a/include/PSUSensor.hpp
+++ b/include/PSUSensor.hpp
@@ -18,7 +18,7 @@ class PSUSensor : public Sensor
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& sensorConfiguration,
               std::string& sensorTypeName, unsigned int factor, double max,
-              double min);
+              double min, PowerState readState);
     ~PSUSensor();
 
   private:
@@ -36,6 +36,10 @@ class PSUSensor : public Sensor
     int fd;
     static constexpr unsigned int sensorPollMs = 1000;
     static constexpr size_t warnAfterErrorCount = 10;
+
+    // Power-on sensor
+    PowerState readState;
+    thresholds::ThresholdTimer thresholdTimer;
 };
 
 class PSUProperty
diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index e94d1c4..abe71fe 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -41,13 +41,13 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
                      std::vector<thresholds::Threshold>&& _thresholds,
                      const std::string& sensorConfiguration,
                      std::string& sensorTypeName, unsigned int factor,
-                     double max, double min) :
+                     double max, double min, PowerState readState) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(_thresholds), sensorConfiguration, objectType, max, min),
     objServer(objectServer), inputDev(io), waitTimer(io), path(path),
     errCount(0),
 
-    sensorFactor(factor)
+    sensorFactor(factor), readState(std::move(readState)), thresholdTimer(io, this)
 {
     if constexpr (DEBUG)
     {
@@ -90,6 +90,7 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
     association = objectServer.add_interface(dbusPath, association::interface);
 
     createInventoryAssoc(conn, association, configurationPath);
+    setupPowerMatch(conn);
     setupRead();
 }
 
@@ -105,10 +106,16 @@ PSUSensor::~PSUSensor()
 
 void PSUSensor::setupRead(void)
 {
+#if 0
     boost::asio::async_read_until(
         inputDev, readBuf, '\n',
         [&](const boost::system::error_code& ec,
             std::size_t /*bytes_transfered*/) { handleResponse(ec); });
+#endif
+    // Sync read to PSU sensor
+    boost::system::error_code ec;
+    boost::asio::read_until(inputDev, readBuf, '\n', ec);
+    handleResponse(ec);
 }
 
 void PSUSensor::handleResponse(const boost::system::error_code& err)
@@ -116,8 +123,36 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
     if (err == boost::system::errc::bad_file_descriptor)
     {
         std::cerr << "Bad file descriptor from " << path << "\n";
+        updateValueInvalid(true);
         return;
     }
+
+    // Set as sensor reading invalid for power-on type sensor
+    if (readState != PowerState::always && !isPowerOn())
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+        errCount = 0;
+
+        // clear response buffer reading
+        std::istream invalidResponseStream(&readBuf);
+        std::string invalidResponse;
+        std::getline(invalidResponseStream, invalidResponse);
+        invalidResponseStream.clear();
+
+        lseek(fd, 0, SEEK_SET);
+        waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+        waitTimer.async_wait([&](const boost::system::error_code& ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                return;
+            }
+            setupRead();
+        });
+
+        return;
+    }
+
     std::istream responseStream(&readBuf);
     if (!err)
     {
@@ -143,12 +178,14 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
                 }
                 updateValue(nvalue);
             }
+            updateValueInvalid(false);
             errCount = 0;
         }
         catch (const std::invalid_argument&)
         {
             std::cerr << "Could not parse " << response << " from path " << path
                       << "\n";
+            updateValueInvalid(true);
             errCount++;
         }
     }
@@ -165,7 +202,8 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
             std::cerr << "Failure to read sensor " << name << " at " << path
                       << "\n";
         }
-        updateValue(0);
+        // updateValue(0);
+        updateValueInvalid(true);
         errCount++;
     }
 
@@ -183,5 +221,17 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
 
 void PSUSensor::checkThresholds(void)
 {
-    thresholds::checkThresholds(this);
+    if (readState != PowerState::always && !isPowerOn())
+    {
+        return;
+    }
+
+    if(readState == PowerState::always)
+    {
+        thresholds::checkThresholds(this);
+    }
+    else
+    {
+        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+    }
 }
diff --git a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
index 0367d2a..16ad94d 100644
--- a/src/PSUSensorMain.cpp
+++ b/src/PSUSensorMain.cpp
@@ -207,6 +207,52 @@ static void
     }
 }
 
+static bool checkPowerState(const SensorData& sensorData,
+                            PowerState& sensorReadState,
+                            const std::string* matchLabel)
+{
+    sensorReadState = PowerState::always;
+
+    if (matchLabel == nullptr)
+    {
+        return false;
+    }
+
+    for (const auto& item : sensorData)
+    {
+        if (item.first.find("PowerStates") == std::string::npos)
+        {
+            continue;
+        }
+
+        auto labelFind = item.second.find("Label");
+        if (labelFind == item.second.end())
+        {
+            continue;
+        }
+        if (std::visit(VariantToStringVisitor(), labelFind->second) !=
+            *matchLabel)
+        {
+            continue;
+        }
+
+        auto findPowerState = item.second.find("PowerState");
+        if (findPowerState == item.second.end())
+        {
+            std::cerr << "failed to find PowerState in configuration\n";
+            return false;
+        }
+
+        std::string powerState = std::visit(
+                            VariantToStringVisitor(), findPowerState->second);
+        setReadState(powerState, sensorReadState);
+
+        break;
+    }
+
+    return true;
+}
+
 void createSensors(boost::asio::io_service& io,
                    sdbusplus::asio::object_server& objectServer,
                    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
@@ -470,9 +516,11 @@ void createSensors(boost::asio::io_service& io,
                           << "\" label=\"" << labelHead << "\"\n";
             }
 
+            // wiw - Remove the PSU PWM sensor.
+/*
             checkPWMSensor(sensorPath, labelHead, *interfacePath,
                            dbusConnection, objectServer, psuNames[0]);
-
+*/
             if (!findLabels.empty())
             {
                 /* Check if this labelHead is enabled in config file */
@@ -720,11 +768,21 @@ void createSensors(boost::asio::io_service& io,
                           << "\"\n";
             }
 
+            /* wiw - Parse the sensor reading power state from the config file.
+               States: Always / On / BiosPost
+            */
+           PowerState sensorReadState;
+           if (!checkPowerState(*sensorData, sensorReadState, &labelHead))
+           {
+               std::cerr << "failed to find the sensor read power state for "
+                          << sensorNameSubStr << "\n";
+           }
+
             sensors[sensorName] = std::make_unique<PSUSensor>(
                 sensorPathStr, sensorType, objectServer, dbusConnection, io,
                 sensorName, std::move(sensorThresholds), *interfacePath,
                 findSensorType->second, factor, psuProperty->maxReading,
-                psuProperty->minReading);
+                psuProperty->minReading, sensorReadState);
 
             ++numCreated;
             if constexpr (DEBUG)
-- 
2.24.1

