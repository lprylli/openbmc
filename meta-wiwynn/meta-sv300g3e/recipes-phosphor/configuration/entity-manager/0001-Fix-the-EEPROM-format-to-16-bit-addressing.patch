From 0f522e099fabfbe0226f2c04710cd0cec3558cd8 Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Fri, 20 Sep 2019 00:08:59 +0800
Subject: [PATCH] Fix the EEPROM format to 16-bit addressing

---
 src/FruDevice.cpp | 29 +++++++++++++++++++++++++++--
 1 file changed, 27 insertions(+), 2 deletions(-)

diff --git a/src/FruDevice.cpp b/src/FruDevice.cpp
index b20b0d3..c8e8958 100644
--- a/src/FruDevice.cpp
+++ b/src/FruDevice.cpp
@@ -151,13 +151,30 @@ static int readBlockData(int flag, int file, uint16_t offset, uint8_t len,
     /* This is for 16 bit addressing EEPROM device. First an offset
      * needs to be written before read data from a offset
      */
-    int ret = i2c_smbus_write_byte_data(file, 0, lowAddr);
+    // int ret = i2c_smbus_write_byte_data(file, 0, lowAddr);
+    int ret = i2c_smbus_write_byte_data(file, highAddr, lowAddr);
     if (ret < 0)
     {
         return ret;
     }
 
-    return i2c_smbus_read_i2c_block_data(file, highAddr, len, buf);
+    int j = 0;
+    for(j=0;j<len;j++)
+    {
+        ret = -1;
+        ret = i2c_smbus_read_byte(file);
+        if(ret < 0)
+        {
+            return ret;
+        }
+        else
+        {
+            *(buf+j) = static_cast<uint8_t>(ret);
+        }
+    }
+
+    // return i2c_smbus_read_i2c_block_data(file, highAddr, len, buf);
+    return len;
 }
 
 bool validateHeader(const std::array<uint8_t, I2C_SMBUS_BLOCK_MAX>& blockData)
@@ -411,6 +428,14 @@ int getBusFrus(int file, int first, int last, int bus,
 
             /* Check for Device type if it is 8 bit or 16 bit */
             int flag = isDevice16Bit(file);
+
+            /*  wiw - Set the flag to 1 since the EEPROM is 16-bit address.
+            * 2019/07/24 */
+            if(6 == bus)
+            {
+                flag = 1;
+            }
+
             if (flag < 0)
             {
                 std::cerr << "failed to read bus " << bus << " address " << ii
-- 
2.22.0

