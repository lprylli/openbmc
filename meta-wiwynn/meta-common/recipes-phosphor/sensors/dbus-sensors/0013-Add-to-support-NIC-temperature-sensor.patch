From 74745f765ccda195335674a9a015ef9be63044ca Mon Sep 17 00:00:00 2001
From: Frederick Lee <Frederick_Lee@wiwynn.com>
Date: Sun, 15 Mar 2020 22:16:46 +0800
Subject: [PATCH] Add to support NIC temperature sensor

---
 CMakeLists.txt                                |  17 ++
 include/NICSensor.hpp                         |  47 +++
 .../xyz.openbmc_project.nicsensor.service     |  11 +
 src/NICSensor.cpp                             | 220 ++++++++++++++
 src/NICSensorMain.cpp                         | 269 ++++++++++++++++++
 5 files changed, 564 insertions(+)
 create mode 100644 include/NICSensor.hpp
 create mode 100644 service_files/xyz.openbmc_project.nicsensor.service
 create mode 100644 src/NICSensor.cpp
 create mode 100644 src/NICSensorMain.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8141c31..4e94102 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -43,6 +43,7 @@ option (DISABLE_FAN "Disable installing fan sensor" OFF)
 option (DISABLE_HWMON_TEMP "Disable installing hwmon temp sensor" OFF)
 option (DISABLE_VR "Disable installing VR sensor" OFF)
 option (DISABLE_EVENT "Disable installing EVENT sensor" OFF)
+option (DISABLE_NIC "Disable installing NIC sensor" OFF)
 option (DISABLE_INTRUSION "Disable installing intrusion sensor" OFF)
 option (DISABLE_IPMB "Disable installing IPMB sensor" OFF)
 option (DISABLE_MCUTEMP "Disable installing MCU temperature sensor" OFF)
@@ -73,6 +74,8 @@ set (VR_SRC_FILES src/Utils.cpp src/VRSensor.cpp src/Thresholds.cpp)
 
 set (EVENT_SRC_FILES src/Utils.cpp src/EventSensor.cpp)
 
+set (NIC_SRC_FILES src/Utils.cpp src/NICSensor.cpp src/Thresholds.cpp)
+
 set (INTRUSION_SRC_FILES src/Utils.cpp src/ChassisIntrusionSensor.cpp)
 
 set (IPMB_SRC_FILES src/Utils.cpp src/Thresholds.cpp)
@@ -219,6 +222,10 @@ add_executable (nvmesensor src/NVMESensorMain.cpp ${NVME_SRC_FILES})
 add_dependencies (nvmesensor sdbusplus-project)
 target_link_libraries (nvmesensor ${SENSOR_LINK_LIBS} -lboost_filesystem)
 
+add_executable (nicsensor src/NICSensorMain.cpp ${NIC_SRC_FILES})
+add_dependencies (nicsensor sdbusplus-project)
+target_link_libraries (nicsensor ${SENSOR_LINK_LIBS})
+
 if (NOT YOCTO)
     add_dependencies (adcsensor ${EXTERNAL_PACKAGES})
     add_dependencies (cpusensor ${EXTERNAL_PACKAGES})
@@ -228,6 +235,7 @@ if (NOT YOCTO)
     add_dependencies (vrsensor ${EXTERNAL_PACKAGES})
     add_dependencies (eventsensor ${EXTERNAL_PACKAGES})
     add_dependencies (nvmesensor ${EXTERNAL_PACKAGES})
+    add_dependencies (nicsensor ${EXTERNAL_PACKAGES})
     add_dependencies (intrusionsensor ${EXTERNAL_PACKAGES})
     add_dependencies (ipmbsensor ${EXTERNAL_PACKAGES})
     add_dependencies (mcutempsensor ${EXTERNAL_PACKAGES})
@@ -330,3 +338,12 @@ if (NOT DISABLE_NVME)
                  ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.nvmesensor.service
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
+
+if (NOT DISABLE_NIC)
+    install (TARGETS nicsensor DESTINATION bin)
+    install (
+        FILES
+            ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.nicsensor.service
+            DESTINATION ${SERVICE_FILE_INSTALL_DIR}
+    )
+endif ()
diff --git a/include/NICSensor.hpp b/include/NICSensor.hpp
new file mode 100644
index 0000000..3c6905e
--- /dev/null
+++ b/include/NICSensor.hpp
@@ -0,0 +1,47 @@
+#pragma once
+
+#include <Thresholds.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+#define NIC_SLAVE_ADDRESS 0x1F
+
+enum nic_cmd_offset
+{
+    temp = 0x01,
+};
+
+class NICSensor : public Sensor
+{
+public:
+    NICSensor(const std::string& path1, const std::string& path2,
+               const std::string& objectType,
+               sdbusplus::asio::object_server& objectServer,
+               std::shared_ptr<sdbusplus::asio::connection>& conn,
+               boost::asio::io_service& io, const std::string& sensorName,
+               std::vector<thresholds::Threshold>&& thresholds,
+               const std::string& sensorConfiguration,
+               std::string& sensorUnit, std::string& sensorTypeName,
+               const double MaxValue, const double MinValue,
+               const uint8_t busId1, const uint8_t busId2, const uint8_t slaveAddr);
+    ~NICSensor();
+
+private:
+    sdbusplus::asio::object_server& objServer;
+    boost::asio::deadline_timer waitTimer;
+    boost::asio::streambuf readBuf;
+    std::string path1;
+    std::string path2;
+    std::string& sensorType;
+    std::string& sensorUnit;
+    int errCount;
+    uint8_t busId1;
+    uint8_t busId2;
+    uint8_t slaveAddr;
+    float senValue;
+
+    void setupRead(void);
+    bool visitNICReg(void);
+    void handleResponse(void);
+    void checkThresholds(void) override;
+};
diff --git a/service_files/xyz.openbmc_project.nicsensor.service b/service_files/xyz.openbmc_project.nicsensor.service
new file mode 100644
index 0000000..e1fa7cf
--- /dev/null
+++ b/service_files/xyz.openbmc_project.nicsensor.service
@@ -0,0 +1,11 @@
+[Unit]
+Description=NIC Sensor
+StopWhenUnneeded=false
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/nicsensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/NICSensor.cpp b/src/NICSensor.cpp
new file mode 100644
index 0000000..4da7e08
--- /dev/null
+++ b/src/NICSensor.cpp
@@ -0,0 +1,220 @@
+/*
+// Copyright (c) 2019 Wiwynn Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <openbmc/libmisc.h>
+#include <openbmc/libobmci2c.h>
+#include <unistd.h>
+
+#include <NICSensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/date_time/posix_time/posix_time.hpp>
+#include <iostream>
+#include <limits>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <string>
+
+static constexpr bool DEBUG = false;
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+
+static constexpr unsigned int sensorPollMs = 1000;
+static constexpr unsigned int sensorScaleFactor = 1000;
+static constexpr size_t warnAfterErrorCount = 10;
+
+NICSensor::NICSensor(const std::string& path1, const std::string& path2,
+                       const std::string& objectType,
+                       sdbusplus::asio::object_server& objectServer,
+                       std::shared_ptr<sdbusplus::asio::connection>& conn,
+                       boost::asio::io_service& io, const std::string& sensorName,
+                       std::vector<thresholds::Threshold>&& _thresholds,
+                       const std::string& sensorConfiguration,
+                       std::string& sensorUnit, std::string& sensorTypeName,
+                       const double MaxValue, const double MinValue,
+                       const uint8_t busId1, const uint8_t busId2, const uint8_t slaveAddr) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(_thresholds), sensorConfiguration, objectType, MaxValue,
+           MinValue),
+    path1(path1), path2(path2), slaveAddr(slaveAddr), objServer(objectServer), waitTimer(io),
+    errCount(0), senValue(0), busId1(busId1), busId2(busId2),
+    sensorType(sensorTypeName), sensorUnit(sensorUnit)
+{
+    std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
+
+    sensorInterface = objectServer.add_interface(
+                          dbusPath, "xyz.openbmc_project.Sensor.Value");
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+                                        dbusPath, "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+                                         dbusPath, "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association =
+        objectServer.add_interface(dbusPath, "org.openbmc.Associations");
+
+    setInitialProperties(conn);
+    setupPowerMatch(conn);
+    setupRead();
+}
+
+NICSensor::~NICSensor()
+{
+    // close the Timer to cancel async operations
+    waitTimer.cancel();
+    objServer.remove_interface(thresholdInterfaceWarning);
+    objServer.remove_interface(thresholdInterfaceCritical);
+    objServer.remove_interface(sensorInterface);
+    objServer.remove_interface(association);
+}
+
+void NICSensor::setupRead(void)
+{
+    bool res = visitNICReg();
+    if (res != true)
+    {
+        errCount++;
+    }
+    else
+    {
+        errCount = 0;
+    }
+
+    handleResponse();
+}
+
+bool NICSensor::visitNICReg(void)
+{
+    int fd = -1;
+    int res = -1;
+
+    if (sensorUnit == "temp")
+    {
+        std::vector<char> filename(32, 0);
+        std::vector<uint8_t> cmdData;
+        std::vector<uint8_t> readBuf;
+
+        fd = open_i2c_dev(busId1, filename.data(), filename.size(), 0);
+        if (fd >= 0)
+        {
+            cmdData.assign(1, nic_cmd_offset::temp);
+            readBuf.assign(1, 0x0);
+
+            res = i2c_master_write_read(fd, slaveAddr, cmdData.size(), cmdData.data(),
+                                    readBuf.size(), readBuf.data());
+            if (res < 0)
+            {
+                if (DEBUG)
+                {
+                    std::cerr << "Fail to r/w I2C bus :" << path1
+                              << " , device Address: " << (unsigned)slaveAddr
+                              << "\n";
+                }
+                close_i2c_dev(fd);
+            }
+            else
+            {
+                uint8_t ret_val = readBuf.at(0);
+                senValue = ret_val;
+                close_i2c_dev(fd);
+                return true;
+            }
+        }
+        else
+        {
+            std::cerr << "Fail to open I2C device: " << path1 << "\n";
+        }
+
+        fd = open_i2c_dev(busId2, filename.data(), filename.size(), 0);
+        if (fd >= 0)
+        {
+            cmdData.assign(1, nic_cmd_offset::temp);
+            readBuf.assign(1, 0x0);
+
+            res = i2c_master_write_read(fd, slaveAddr, cmdData.size(), cmdData.data(),
+                                    readBuf.size(), readBuf.data());
+            if (res < 0)
+            {
+                if (DEBUG)
+                {
+                    std::cerr << "Fail to r/w I2C bus :" << path2
+                              << " , device Address: " << (unsigned)slaveAddr
+                              << "\n";
+                }
+                close_i2c_dev(fd);
+            }
+            else
+            {
+                uint8_t ret_val = readBuf.at(0);
+                senValue = ret_val;
+                close_i2c_dev(fd);
+                return true;
+            }
+        }
+        else
+        {
+            std::cerr << "Fail to open I2C device: " << path2 << "\n";
+        }
+        return false;
+    }
+    else
+    {
+        //TODO: other type sensors
+    }
+}
+
+void NICSensor::handleResponse()
+{
+    if (errCount == warnAfterErrorCount)
+    {
+        std::cerr << "Failure to read sensor " << name
+                  << " at " << path1
+                  << " and " << path2
+                  << "\n";
+    }
+
+    if (errCount >= warnAfterErrorCount)
+    {
+        updateValueInvalid(true);
+        // updateValue(0);
+    }
+    else
+    {
+        if (static_cast<double>(senValue) != value)
+        {
+            updateValue(senValue);
+        }
+        updateValueInvalid(false);
+    }
+
+    waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+    waitTimer.async_wait([&](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being canceled
+        }
+        setupRead();
+    });
+}
+
+void NICSensor::checkThresholds(void)
+{
+    thresholds::checkThresholds(this);
+}
diff --git a/src/NICSensorMain.cpp b/src/NICSensorMain.cpp
new file mode 100644
index 0000000..72d27b9
--- /dev/null
+++ b/src/NICSensorMain.cpp
@@ -0,0 +1,269 @@
+/*
+// Copyright (c) 2019 Wiwynn Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <Utils.hpp>
+#include <NICSensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_set.hpp>
+#include <boost/filesystem.hpp>
+#include <filesystem>
+#include <fstream>
+#include <regex>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+static constexpr bool DEBUG = false;
+
+namespace fs = std::filesystem;
+static constexpr std::array<const char*, 1> sensorTypes =
+{
+    "xyz.openbmc_project.Configuration.NIC"
+};
+
+static boost::container::flat_map<std::string, std::string> sensorTable;
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<NICSensor>>& sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::unique_ptr<boost::container::flat_set<std::string>>&
+    sensorsChanged)
+{
+    bool firstScan = sensorsChanged == nullptr;
+    // use new data the first time, then refresh
+    ManagedObjectType sensorConfigurations;
+    bool useCache = false;
+    for (const char* type : sensorTypes)
+    {
+        if (!getSensorConfiguration(type, dbusConnection, sensorConfigurations,
+                                    useCache))
+        {
+            std::cerr << "error communicating to entity manager\n";
+            return;
+        }
+        useCache = true;
+    }
+
+    for (const std::pair<sdbusplus::message::object_path, SensorData>& sensor :
+            sensorConfigurations)
+    {
+        const SensorData* sensorData = nullptr;
+        const std::string* interfacePath = nullptr;
+        const char* sensorType = nullptr;
+        const std::pair<std::string, boost::container::flat_map<
+        std::string, BasicVariantType>>*
+                                     baseConfiguration = nullptr;
+
+        sensorData = &(sensor.second);
+        for (const char* type : sensorTypes)
+        {
+            auto sensorBase = sensorData->find(type);
+            if (sensorBase != sensorData->end())
+            {
+                baseConfiguration = &(*sensorBase);
+                sensorType = type;
+                break;
+            }
+        }
+        if (baseConfiguration == nullptr)
+        {
+            std::cerr << "error finding base configuration for NIC \n";
+            continue;
+        }
+        auto configurationAddress =
+            baseConfiguration->second.find("Address");
+        if (configurationAddress == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the Address in JSON\n";
+            continue;
+        }
+
+        uint8_t slaveAddr =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationAddress->second));
+
+        if ( 0x80 <= slaveAddr )
+        {
+            std::cerr << "error i2c slave addr is out of the range (7-bit addr)\n";
+            continue;
+        }
+
+        auto configurationBus1 = baseConfiguration->second.find("Bus1");
+        if (configurationBus1 == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the Bus1 in JSON\n";
+            continue;
+        }
+
+        uint8_t busId1 =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationBus1->second));
+
+        std::string i2cBus1 = "/dev/i2c-" + std::to_string(busId1);
+
+        auto configurationBus2 = baseConfiguration->second.find("Bus2");
+        if (configurationBus2 == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the Bus2 in JSON\n";
+            continue;
+        }
+
+        uint8_t busId2 =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationBus2->second));
+
+        std::string i2cBus2 = "/dev/i2c-" + std::to_string(busId2);
+
+        interfacePath = &(sensor.first.str);
+        if (interfacePath == nullptr)
+        {
+            std::cerr << " invalid sensor interface path\n";
+            continue;
+        }
+
+        auto findSensorName = baseConfiguration->second.find("Name");
+        if (findSensorName == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor name in JSON\n";
+            continue;
+        }
+        std::string sensorName = std::get<std::string>(findSensorName->second);
+
+        // Sensor Type: power, curr, temp, volt
+        auto findSensorTypeJson = baseConfiguration->second.find("SensorType");
+        if (findSensorTypeJson == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor type in JSON\n";
+            continue;
+        }
+        std::string SensorTypeJson =
+            std::get<std::string>(findSensorTypeJson->second);
+
+        auto findSensorType = sensorTable.find(SensorTypeJson);
+        if (findSensorType == sensorTable.end())
+        {
+            std::cerr << "fail to find match for NIC sensorType: "
+                      << SensorTypeJson << "\n";
+            continue;
+        }
+
+        // on rescans, only update sensors we were signaled by
+        auto findSensor = sensors.find(sensorName);
+        if (!firstScan && findSensor != sensors.end())
+        {
+            bool found = false;
+            for (auto it = sensorsChanged->begin(); it != sensorsChanged->end();
+                    it++)
+            {
+                if (boost::ends_with(*it, findSensor->second->name))
+                {
+                    sensorsChanged->erase(it);
+                    findSensor->second = nullptr;
+                    found = true;
+                    break;
+                }
+            }
+            if (!found)
+            {
+                continue;
+            }
+        }
+
+        std::vector<thresholds::Threshold> sensorThresholds;
+        if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
+        {
+            std::cerr << "error populating thresholds for " << sensorName
+                      << "\n";
+        }
+
+        constexpr double defaultMaxReading = 127;
+        constexpr double defaultMinReading = -128;
+        auto limits = std::make_pair(defaultMinReading, defaultMaxReading);
+
+        findLimits(limits, baseConfiguration);
+
+        sensors[sensorName] = std::make_unique<NICSensor>(
+                                  i2cBus1, i2cBus2, sensorType, objectServer, dbusConnection, io, sensorName,
+                                  std::move(sensorThresholds), *interfacePath, findSensorType->first,
+                                  findSensorType->second, defaultMaxReading, defaultMinReading,
+                                  busId1, busId2, slaveAddr);
+    }
+}
+
+void propertyInitialize(void)
+{
+    sensorTable = {{"power", "power/"},
+        {"curr", "current/"},
+        {"temp", "temperature/"},
+        {"volt", "voltage/"}
+    };
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.NICSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+    boost::container::flat_map<std::string, std::unique_ptr<NICSensor>> sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+    std::unique_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+                std::make_unique<boost::container::flat_set<std::string>>();
+
+    propertyInitialize();
+
+    io.post([&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::deadline_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+    [&](sdbusplus::message::message & message) {
+        if (message.is_method_error())
+        {
+            std::cerr << "callback method error\n";
+            return;
+        }
+        sensorsChanged->insert(message.get_path());
+        // this implicitly cancels the timer
+        filterTimer.expires_from_now(boost::posix_time::seconds(1));
+
+        filterTimer.async_wait([&](const boost::system::error_code & ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                /* we were canceled*/
+                return;
+            }
+            else if (ec)
+            {
+                std::cerr << "timer error\n";
+                return;
+            }
+            createSensors(io, objectServer, sensors, systemBus,
+                          sensorsChanged);
+        });
+    };
+
+    for (const char* type : sensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+                         static_cast<sdbusplus::bus::bus&>(*systemBus),
+                         "type='signal',member='PropertiesChanged',path_namespace='" +
+                         std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+                         eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
-- 
2.24.1

